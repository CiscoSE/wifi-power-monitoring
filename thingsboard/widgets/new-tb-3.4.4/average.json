{
  "alias": "average",
  "name": "Average",
  "image": null,
  "description": null,
  "descriptor": {
    "type": "latest",
    "sizeX": 7.5,
    "sizeY": 3,
    "resources": [],
    "templateHtml": "",
    "templateCss": "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
    "controllerScript": "/**\n * @license\n * Copyright (c) 2023 Cisco and/or its affiliates.\n *\n * This software is licensed to you under the terms of the Cisco Sample\n * Code License, Version 1.1 (the \"License\"). You may obtain a copy of the\n * License at\n *\n *                https://developer.cisco.com/docs/licenses\n *\n * All use of the material herein must be in accordance with the terms of\n * the License. All rights not expressly granted by the License are\n * reserved. Unless required by applicable law or agreed to separately in\n * writing, software distributed under the License is distributed on an \"AS\n * IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied.\n */\n\nself.onInit = function() {\n\n    self.ctx.datasourceTitleCells = [];\n    self.ctx.valueCells = [];\n    self.ctx.labelCells = [];\n\n    // Create table with 1 entry\n    self.ctx.$container.append(\n        \"<div id='singleentry' class='tbDatasource-container'></div>\"\n    );\n    var datasourceContainer = $('#singleentry',\n        self.ctx.$container);\n\n    datasourceContainer.append(\n        \"<div class='tbDatasource-title'>Average</div>\"\n    );\n\n    var datasourceTitleCell = $('.tbDatasource-title',\n        datasourceContainer);\n    self.ctx.datasourceTitleCells.push(\n        datasourceTitleCell);\n\n    datasourceContainer.append(\n        \"<table id='table0' class='tbDatasource-table'><col width='30%'><col width='70%'></table>\"\n    );\n\n    // Each datasource is a device, for example\n    for (var i = 0; i < self.ctx.datasources\n        .length; i++) {\n        var tbDatasource = self.ctx.datasources[i];\n\n        var tableId = 'table' + i;\n        var table = $('#' + tableId, self.ctx\n            .$container);\n\n        // Gets value of key for the first device - why??\n        for (var a = 0; a < tbDatasource.dataKeys\n            .length; a++) {\n            var dataKey = tbDatasource.dataKeys[a];\n            var labelCellId = 'labelCell' + a;\n            var cellId = 'cell' + a;\n            table.append(\"<tr><td id='\" + labelCellId +\n                \"'>\" + dataKey.label +\n                \"</td><td id='\" + cellId +\n                \"'></td></tr>\");\n            var labelCell = $('#' + labelCellId, table);\n            self.ctx.labelCells.push(labelCell);\n            var valueCell = $('#' + cellId, table);\n            self.ctx.valueCells.push(valueCell);\n        }\n\n    }\n\n    self.onResize();\n}\n\n// Compute sum over datasources (e.g. entities such as device1, device2, device3)\nself.onDataUpdated = function() {\n    var sum = 0;\n    // For each entity (device1, device2, etc)\n    for (var i = 0; i < self.ctx.datasources\n        .length; i++) {\n        var tbDatasource = self.ctx.datasources[i];\n        for (var a = 0; a < tbDatasource.dataKeys\n            .length; a++) {\n            // Read all values\n            var cellData = self.ctx.data[i];\n            if (cellData && cellData.data && cellData\n                .data.length > 0) {\n                var tvPair = cellData.data[cellData.data\n                    .length -\n                    1];\n                var value = tvPair[1];\n                var textValue;\n                //toDo -> + IsNumber\n\n                if (isNumber(value)) {\n                    var decimals = self.ctx.decimals;\n                    var units = self.ctx.units;\n                    if (cellData.dataKey.decimals ||\n                        cellData.dataKey.decimals === 0\n                        ) {\n                        decimals = cellData.dataKey\n                            .decimals;\n                    }\n                    if (cellData.dataKey.units) {\n                        units = cellData.dataKey.units;\n                    }\n                    txtValue = self.ctx.utils\n                        .formatValue(value, decimals,\n                            units, true);\n                    sum = sum + parseFloat(value, 2);\n                } else {\n                    txtValue = value;\n                }\n            }\n        }\n    }\n\n    if (self.ctx.datasources.length > 0) {\n        avg = sum / self.ctx.datasources.length;\n    }\n    //self.ctx.valueCells[0].html(avg.toFixed(2));\n    measurement = avg.toFixed(2) + \" \" + self.ctx.units;\n    self.ctx.valueCells[0].html(measurement);\n\n    function isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n}\n\nself.onResize = function() {\n    var datasourceTitleFontSize = self.ctx.height / 8;\n    if (self.ctx.width / self.ctx.height <= 1.5) {\n        datasourceTitleFontSize = self.ctx.width / 12;\n    }\n    datasourceTitleFontSize = Math.min(\n        datasourceTitleFontSize, 20);\n    for (var i = 0; i < self.ctx.datasourceTitleCells\n        .length; i++) {\n        self.ctx.datasourceTitleCells[i].css(\n            'font-size', datasourceTitleFontSize +\n            'px');\n    }\n    var valueFontSize = self.ctx.height / 9;\n    var labelFontSize = self.ctx.height / 9;\n    if (self.ctx.width / self.ctx.height <= 1.5) {\n        valueFontSize = self.ctx.width / 15;\n        labelFontSize = self.ctx.width / 15;\n    }\n    valueFontSize = Math.min(valueFontSize, 18);\n    labelFontSize = Math.min(labelFontSize, 18);\n\n    for (i = 0; i < self.ctx.valueCells; i++) {\n        self.ctx.valueCells[i].css('font-size',\n            valueFontSize + 'px');\n        self.ctx.valueCells[i].css('height',\n            valueFontSize * 2.5 + 'px');\n        self.ctx.valueCells[i].css('padding', '0px ' +\n            valueFontSize + 'px');\n        self.ctx.labelCells[i].css('font-size',\n            labelFontSize + 'px');\n        self.ctx.labelCells[i].css('height',\n            labelFontSize * 2.5 + 'px');\n        self.ctx.labelCells[i].css('padding', '0px ' +\n            labelFontSize + 'px');\n    }\n}\n\nself.onDestroy = function() {}",
    "settingsSchema": "{}",
    "dataKeySettingsSchema": "{}\n",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Average\"}"
  }
}